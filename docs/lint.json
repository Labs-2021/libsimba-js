[
  {
    "name": "Simbachain#callMethodWithFile",
    "filePath": "src/simba/simba.js",
    "lines": [
      {
        "lineNumber": 256,
        "line": "    /**\r"
      },
      {
        "lineNumber": 257,
        "line": "     * @override\r"
      },
      {
        "lineNumber": 258,
        "line": "     * Call a method on the API with files\r"
      },
      {
        "lineNumber": 259,
        "line": "     * @param {string} method - the method to call\r"
      },
      {
        "lineNumber": 260,
        "line": "     * @param {Object} parameters- the parameters for the method\r"
      },
      {
        "lineNumber": 261,
        "line": "     * @param {Array<Blob|File>} files - the files\r"
      },
      {
        "lineNumber": 262,
        "line": "     * @return {Promise<Object>} - a promise resolving with the transaction details\r"
      },
      {
        "lineNumber": 263,
        "line": "     */\r"
      },
      {
        "lineNumber": 264,
        "line": "    async callMethodWithFile(method, parameters, files) {\r"
      }
    ],
    "codeParams": [
      "method",
      "parameters",
      "files"
    ],
    "docParams": [
      "method",
      "parameters-",
      "files"
    ]
  },
  {
    "name": "Simbachain#submitTxn",
    "filePath": "src/simba/simba.js",
    "lines": [
      {
        "lineNumber": 285,
        "line": "    /**\r"
      },
      {
        "lineNumber": 286,
        "line": "     * @private\r"
      },
      {
        "lineNumber": 287,
        "line": "     * Internal method for submitting method calls and retrying on nonce errors\r"
      },
      {
        "lineNumber": 288,
        "line": "     * @param {string} txnId - the txnId\r"
      },
      {
        "lineNumber": 289,
        "line": "     * @param {string} signed - The signed txn\r"
      },
      {
        "lineNumber": 290,
        "line": "     * @returns {Promise<Response>} - The response with transaction data\r"
      },
      {
        "lineNumber": 291,
        "line": "     */\r"
      },
      {
        "lineNumber": 292,
        "line": "    async submitTxn(txnId, payload, maxTries, currentTry){\r"
      }
    ],
    "codeParams": [
      "txnId",
      "payload",
      "maxTries",
      "currentTry"
    ],
    "docParams": [
      "txnId",
      "signed"
    ]
  },
  {
    "name": "Simbachain#sendMethodRequest",
    "filePath": "src/simba/simba.js",
    "lines": [
      {
        "lineNumber": 329,
        "line": "    /**\r"
      },
      {
        "lineNumber": 330,
        "line": "     * @private\r"
      },
      {
        "lineNumber": 331,
        "line": "     * Internal method for sending method calls\r"
      },
      {
        "lineNumber": 332,
        "line": "     * @param {string} url - the url\r"
      },
      {
        "lineNumber": 333,
        "line": "     * @param {object} formdata - Formdata for the POST\r"
      },
      {
        "lineNumber": 334,
        "line": "     * @returns {Promise<Response>} - The response with transaction data\r"
      },
      {
        "lineNumber": 335,
        "line": "     */\r"
      },
      {
        "lineNumber": 336,
        "line": "    async sendMethodRequest(method, formdata){\r"
      }
    ],
    "codeParams": [
      "method",
      "formdata"
    ],
    "docParams": [
      "url",
      "formdata"
    ]
  },
  {
    "name": "PKWallet#generateWallet",
    "filePath": "src/wallet/pkwallet.js",
    "lines": [
      {
        "lineNumber": 33,
        "line": "    /**\r"
      },
      {
        "lineNumber": 34,
        "line": "     * @override\r"
      },
      {
        "lineNumber": 35,
        "line": "     * Generate a wallet\r"
      },
      {
        "lineNumber": 36,
        "line": "     * @param {string} passkey - The pass key to lock the wallet\r"
      },
      {
        "lineNumber": 37,
        "line": "     * @param {function} [progressCB] - A callback, accepting a number between 0-1, indicating decryption progress\r"
      },
      {
        "lineNumber": 38,
        "line": "     * @returns {Promise} - Returns a promise resolving with the private key when the wallet is created\r"
      },
      {
        "lineNumber": 39,
        "line": "     */\r"
      },
      {
        "lineNumber": 40,
        "line": "    generateWallet(progressCB){\r"
      }
    ],
    "codeParams": [
      "progressCB"
    ],
    "docParams": [
      "passkey",
      "progressCB"
    ]
  }
]