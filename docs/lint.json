[
  {
    "name": "Simbachain#callMethodWithFile",
    "filePath": "src/simba/simba.js",
    "lines": [
      {
        "lineNumber": 265,
        "line": "    /**"
      },
      {
        "lineNumber": 266,
        "line": "     * @override"
      },
      {
        "lineNumber": 267,
        "line": "     * Call a method on the API with files"
      },
      {
        "lineNumber": 268,
        "line": "     * @param {string} method - the method to call"
      },
      {
        "lineNumber": 269,
        "line": "     * @param {Object} parameters- the parameters for the method"
      },
      {
        "lineNumber": 270,
        "line": "     * @param {Array<Blob|File>} files - the files"
      },
      {
        "lineNumber": 271,
        "line": "     * @return {Promise<Object>} - a promise resolving with the transaction details"
      },
      {
        "lineNumber": 272,
        "line": "     */"
      },
      {
        "lineNumber": 273,
        "line": "    async callMethodWithFile(method, parameters, files) {"
      }
    ],
    "codeParams": [
      "method",
      "parameters",
      "files"
    ],
    "docParams": [
      "method",
      "parameters-",
      "files"
    ]
  },
  {
    "name": "Simbachain#submitTxn",
    "filePath": "src/simba/simba.js",
    "lines": [
      {
        "lineNumber": 294,
        "line": "    /**"
      },
      {
        "lineNumber": 295,
        "line": "     * @private"
      },
      {
        "lineNumber": 296,
        "line": "     * Internal method for submitting method calls and retrying on nonce errors"
      },
      {
        "lineNumber": 297,
        "line": "     * @param {string} txnId - the txnId"
      },
      {
        "lineNumber": 298,
        "line": "     * @param {string} signed - The signed txn"
      },
      {
        "lineNumber": 299,
        "line": "     * @returns {Promise<Response>} - The response with transaction data"
      },
      {
        "lineNumber": 300,
        "line": "     */"
      },
      {
        "lineNumber": 301,
        "line": "    async submitTxn(txnId, payload, maxTries, currentTry){"
      }
    ],
    "codeParams": [
      "txnId",
      "payload",
      "maxTries",
      "currentTry"
    ],
    "docParams": [
      "txnId",
      "signed"
    ]
  },
  {
    "name": "Simbachain#sendMethodRequest",
    "filePath": "src/simba/simba.js",
    "lines": [
      {
        "lineNumber": 338,
        "line": "    /**"
      },
      {
        "lineNumber": 339,
        "line": "     * @private"
      },
      {
        "lineNumber": 340,
        "line": "     * Internal method for sending method calls"
      },
      {
        "lineNumber": 341,
        "line": "     * @param {string} url - the url"
      },
      {
        "lineNumber": 342,
        "line": "     * @param {FormData} formdata - Formdata for the POST"
      },
      {
        "lineNumber": 343,
        "line": "     * @returns {Promise<Response>} - The response with transaction data"
      },
      {
        "lineNumber": 344,
        "line": "     */"
      },
      {
        "lineNumber": 345,
        "line": "    async sendMethodRequest(method, formdata){"
      }
    ],
    "codeParams": [
      "method",
      "formdata"
    ],
    "docParams": [
      "url",
      "formdata"
    ]
  },
  {
    "name": "PKWallet#generateWallet",
    "filePath": "src/wallet/pkwallet.js",
    "lines": [
      {
        "lineNumber": 33,
        "line": "    /**"
      },
      {
        "lineNumber": 34,
        "line": "     * @override"
      },
      {
        "lineNumber": 35,
        "line": "     * Generate a wallet"
      },
      {
        "lineNumber": 36,
        "line": "     * @param {string} passkey - The pass key to lock the wallet"
      },
      {
        "lineNumber": 37,
        "line": "     * @param {function} [progressCB] - A callback, accepting a number between 0-1, indicating decryption progress"
      },
      {
        "lineNumber": 38,
        "line": "     * @returns {Promise} - Returns a promise resolving with the private key when the wallet is created"
      },
      {
        "lineNumber": 39,
        "line": "     */"
      },
      {
        "lineNumber": 40,
        "line": "    generateWallet(progressCB){"
      }
    ],
    "codeParams": [
      "progressCB"
    ],
    "docParams": [
      "passkey",
      "progressCB"
    ]
  }
]